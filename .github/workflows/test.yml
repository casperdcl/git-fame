name: Test
on:
  push:
  pull_request:
  schedule:
  - cron: '3 2 1 * *'  # M H d m w (monthly at 2:03)
jobs:
  check:
    if: github.event_name != 'pull_request' || github.head_ref != 'devel'
    name: Check
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    - name: Install
      run: pip install -U tox
    - name: Test
      run: tox
      env:
        TOXENV: 'setup.py,nodeps'
    - name: Self install
      run: pip install -U .
    - uses: reviewdog/action-setup@v1
    - name: flake8
      run: |
        pip install -U flake8
        set -o pipefail
        flake8 -j8 --count --statistics . | reviewdog -f=pep8 -name=Format -tee -reporter=github-check -filter-mode nofilter
      env:
        REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  test:
    if: github.event_name != 'pull_request' || github.head_ref != 'devel'
    strategy:
      matrix:
        python: [2.7, 3.5, 3.6, 3.7, 3.8, 3.9]
    name: Python ${{ matrix.python }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python }}
    - name: Install
      run: pip install -U tox
    - name: Test
      run: tox -e py${PYVER/./}
      env:
        PYVER: ${{ matrix.python }}
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
    - name: Coveralls Parallel
      uses: AndreMiras/coveralls-python-action@develop
      with:
        parallel: true
  finish:
    if: github.event_name != 'pull_request' || github.head_ref != 'devel'
    name: Coverage
    needs: test
    runs-on: ubuntu-latest
    steps:
    - name: Coveralls Finished
      uses: AndreMiras/coveralls-python-action@develop
      with:
        parallel-finished: true
  deploy:
    if: github.event_name != 'pull_request' || github.head_ref != 'devel'
    name: Deploy
    needs: [check, test]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    - name: Install
      run: |
        sudo apt-get install -yqq pandoc
        pip install .[dev]
        make build .dockerignore snapcraft.yaml
    - if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags')
      uses: casperdcl/deploy-pypi@v1
      with:
        password: ${{ secrets.TWINE_PASSWORD }}
        gpg_key: ${{ secrets.GPG_KEY }}
        skip_existing: true
    - id: collect_assets
      name: Collect assets
      run: |
        echo "::set-output name=asset_path::$(ls dist/*.whl)"
        echo "::set-output name=asset_name::$(basename dist/*.whl)"
        echo "::set-output name=asset_path_sig::$(ls dist/*.whl.asc 2>/dev/null)"
        echo "::set-output name=asset_name_sig::$(basename dist/*.whl.asc 2>/dev/null)"
        if [[ $GITHUB_REF == refs/tags/v* ]]; then
          echo ::set-output name=docker_tags::latest,${GITHUB_REF/refs\/tags\/v/}
          echo ::set-output name=snap_channel::stable
        elif [[ $GITHUB_REF == refs/heads/master ]]; then
          echo ::set-output name=docker_tags::master
          echo ::set-output name=snap_channel::candidate
        elif [[ $GITHUB_REF == refs/heads/devel ]]; then
          echo ::set-output name=docker_tags::devel
          echo ::set-output name=snap_channel::edge
        fi
        git log --pretty='format:%d%n- %s%n%b---' $(git tag --sort=v:refname | tail -n2 | head -n1)..HEAD > _CHANGES.md
    - if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags')
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: git-fame ${{ github.ref }} stable
        body_path: _CHANGES.md
        draft: true
    - if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags')
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ steps.collect_assets.outputs.asset_path }}
        asset_name: ${{ steps.collect_assets.outputs.asset_name }}
        asset_content_type: application/zip
    - if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags')
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ steps.collect_assets.outputs.asset_path_sig }}
        asset_name: ${{ steps.collect_assets.outputs.asset_name_sig }}
        asset_content_type: text/plain
    - name: Snap install
      uses: samuelmeuli/action-snapcraft@v1
      with:
        use_lxd: true
    - name: Snap build
      run: |
        export SNAPCRAFT_IMAGE_INFO='{"build_url": "https://github.com/casperdcl/git-fame/actions/runs/'$GITHUB_RUN_ID'"}'
        sg lxd -c 'snapcraft --use-lxd'
      env:
        SNAPCRAFT_BUILD_INFO: 1  # https://snapcraft.io/blog/introducing-developer-notifications-for-snap-security-updates
    - if: github.event_name == 'push' && steps.collect_assets.outputs.snap_channel
      name: Snap login
      uses: samuelmeuli/action-snapcraft@v1
      with:
        skip_install: true
        snapcraft_token: ${{ secrets.SNAP_TOKEN }}
    - if: github.event_name == 'push' && steps.collect_assets.outputs.snap_channel
      name: Snap deploy
      run: |
        if [ -n "$(ls git-fame*.snap 2>/dev/null)" ]; then
          sudo snapcraft upload git-fame*.snap --release $CHANNEL
        fi
      env:
        CHANNEL: ${{ steps.collect_assets.outputs.snap_channel }}
    - name: Docker build push
      uses: elgohr/Publish-Docker-Github-Action@master
      with:
        name: ${{ github.repository }}
        tags: ${{ steps.collect_assets.outputs.docker_tags }}
        password: ${{ secrets.DOCKER_PWD }}
        username: ${{ secrets.DOCKER_USR }}
        no_push: ${{ steps.collect_assets.outputs.docker_tags == '' }}
    - name: Docker push GitHub
      uses: elgohr/Publish-Docker-Github-Action@master
      with:
        name: ${{ github.repository }}/git-fame
        tags: ${{ steps.collect_assets.outputs.docker_tags }}
        password: ${{ github.token }}
        username: ${{ github.actor }}
        registry: docker.pkg.github.com
        no_push: ${{ steps.collect_assets.outputs.docker_tags == '' }}
